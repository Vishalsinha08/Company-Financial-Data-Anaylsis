# -*- coding: utf-8 -*-
"""Finance Data analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4PAIu2PKyMt1l1_cvT1XpSnVPWKpbZg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv("Financials")

len(df)

print(df.memory_usage(deep=True).sum(), "bytes")

df.columns

# function covert values in paranthesis to negative numbers
def convert_parantheis(val):
  if isinstance(val,str):
    if val.startswith('(') and val.endswith(')'):
      return -float(val[1:-1].replace(",","")) # Fixed: Removed extra '.' from slice
    else:
      return float(val.replace(",","")) # Indented correctly to align with first if
  else: # Indented correctly to align with outer if
    return val

# List of columns to clean
columns_to_clean = ['Units Sold', 'Manufacturing Price', 'Sale Price', 'Gross Sales', 'Discounts', 'Sales', 'COGS', 'Profit']

columns_to_clean

import pandas as pd
import numpy as np

# Define function to convert values in parentheses to negative numbers
def convert_parentheses(value):
    if isinstance(value, str) and '(' in value and ')' in value:
        return -float(value.replace('(', '').replace(')', ''))
    return float(value) if value else np.nan

# Columns to clean
columns_to_clean = ['Units Sold', 'Manufacturing Price', 'Sale Price', 'Gross Sales',
                    'Discounts', 'Sales', 'COGS', 'Profit']  # Adjust as needed

# Ensure column names are stripped of spaces
df.columns = df.columns.str.strip()

# Process only existing columns
existing_columns = df.columns.intersection(columns_to_clean)

# Clean numerical columns
for col in existing_columns:
    if df[col].dtype == "object":
        df[col] = (
            df[col]
            .str.replace(r'[\$,]', '', regex=True)  # Remove $, and ,
            .str.replace('-', '', regex=True)  # Remove -
            .str.strip()  # Remove spaces
        )
        df[col] = df[col].replace("", np.nan).apply(convert_parentheses).astype(float)

# Convert 'Date' column to datetime format
if "Date" in df.columns:
    df["Date"] = pd.to_datetime(df["Date"])

# Display cleaned data
df.head()



# remove the "$" ,"-" and"," from the columns convert value in paranthesis to negative ,convert empty string to nan and then convert float
for col in existing_columns :
  if df[col].dtype== "object":
    df=df[col].str.replace("$","").str.replace("-","").str.replace(",","").str.strip()
    df[col]=df[col].replace("",np.nan).apply(convert_parantheis).astype(float)
    # convert "data column into date format
    df["Date"]=pd.to_datetime(df["Date"])
# display head()

df.head()

import matplotlib.pyplot as plt

import matplotlib.pyplot as plt

# Group data by Date
grouped_df = df.groupby('Date').agg({'Sales': 'sum', 'Profit': 'sum'})

# Plot Sales and Profit over time
plt.figure(figsize=(14, 7))
plt.plot(grouped_df.index, grouped_df['Sales'], label='Sales')
plt.plot(grouped_df.index, grouped_df['Profit'], label='Profit')
plt.title('Sales and Profit over Time')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.grid()
plt.show()

grouped_df

plt.figure(figsize=(14,7))
plt.plot(grouped_df.index,grouped_df["Sales"],label="Sales")
plt.plot(grouped_df.index,grouped_df["Profit"],label="Profit")
plt.title("Sales and Profit")
plt.xlabel("Date")
plt.ylabel("Amount")
plt.legend()
plt.grid()

# group by segment
groupby_segment=df.groupby("Segment").agg({"Sales":"sum","Profit":"sum"})
groupby_segment
fig,ax=plt.subplots(2,1,figsize=(12,12))
ax[0].bar(groupby_segment.index,groupby_segment["Sales"],color="red",alpha=0.7)
ax[0].set_title("Sales by Segment")
ax[0].set_xlabel("Segment")
ax[0].grid()
ax[1].bar(groupby_segment.index,groupby_segment["Profit"],color="green",alpha=0.7)
ax[1].set_title("Profit by Segment")
ax[1].set_xlabel("Segment")
ax[1].set_label("profit")
ax[1].grid()
plt.tight_layout()
plt.show()

# group by country
grouped_country=df.groupby("Country").agg({"Sales":"sum","Profit":"sum"})

grouped_country

# sort the data
grouped_country=grouped_country.sort_values(by="Sales",ascending=False)
# plot the sales and profit by country
fig,ax=plt.subplots(2,1,figsize=(12,12))
ax[0].bar(grouped_country.index,grouped_country["Sales"],color="red",alpha=0.7)
ax[0].set_title("Sales by Country")
ax[0].set_xlabel("Country")
ax[0].grid()
ax[1].bar(grouped_country.index,grouped_country["Profit"],color="green",alpha=0.7)
ax[1].set_title("Profit by Country")
ax[1].set_xlabel("country")
plt.grid()
plt.tight_layout()
plt.show()

grouped_country

df["Discounts"].describe()

# crearte a scatter plot of discount vs profit
plt.figure(figsize=(12,8))
plt.scatter(df["Discounts"],df["Profit"],alpha=0.5)
plt.title("Discount vs Profit")
plt.xlabel("Discount")
plt.ylabel("Profit")
plt.grid()
plt.show()

# grouped product
grouped_product = df.groupby("Product").agg({"Sales":"sum","Profit":"sum"})

grouped_product

# Group data by Product
grouped_product = df.groupby('Product').agg({'Sales': 'sum', 'Profit': 'sum'})

# Sort data by Sales
grouped_product = grouped_product.sort_values(by='Sales', ascending=False)

# Plot Sales and Profit by Product
fig, ax = plt.subplots(2, 1, figsize=(14, 14))

ax[0].bar(grouped_product.index, grouped_product['Sales'], color='blue', alpha=0.7)
ax[0].set_title('Sales by Product')
ax[0].set_xlabel('Product')
ax[0].set_ylabel('Sales')
ax[0].tick_params(axis='x', rotation=90)
ax[0].grid()

ax[1].bar(grouped_product.index, grouped_product['Profit'], color='green', alpha=0.7)
ax[1].set_title('Profit by Product')
ax[1].set_xlabel('Product')
ax[1].set_ylabel('Profit')
ax[1].tick_params(axis='x', rotation=90)
ax[1].grid()

plt.tight_layout()

# grouped by discount brand
grouped_discount=df.groupby("Discount Band").agg({"Sales":"sum"})
grouped_discount=grouped_discount.sort_values(by="Sales",ascending=False)

grouped_discount

#Plot Sales by Discount Band
plt.figure(figsize=(10, 6))
plt.bar(grouped_discount.index, grouped_discount['Sales'], color='purple', alpha=0.7)
plt.title('Sales by Discount Band')
plt.xlabel('Discount Band')
plt.ylabel('Sales')
plt.grid()
plt.show()

# use seaborn
import seaborn as sns
correlation=df[["Manufacturing Price","Sale Price","Sales","Profit"]].corr()

correlation

# plot of heatmap of correlation
plt.figure(figsize=(10,8))
sns.heatmap(correlation,annot=True,cmap="coolwarm",center=0)
plt.title("Correlation Heatmap")

# create a new data Frame with totaly monthly sales and profit
monthly_data=df.groupby([df["Date"].dt.year,df["Date"].dt.month]).agg({"Sales":"sum","Profit":"sum"})

monthly_data

monthly_data.index.names=["Year","Month"]

monthly_data.reset_index(inplace=True)

# PLOTLY OF SALES AND PROFI
monthly_data["year-month"]=pd.to_datetime(monthly_data[["Year","Month"]].assign(day=1))

monthly_data["year-month"]

plt.figure(figsize=(12,8))
plt.plot(monthly_data["year-month"],monthly_data["Sales"],label="Sales")
plt.plot(monthly_data['year-month'], monthly_data['Profit'], label='Profit')
plt.title('Monthly Sales and Profit')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.grid()
plt.show()

# create a cross tabulation of product and segement
product_segment_cross_tab=pd.crosstab(df["Product"],df["Segment"])
plt.figure(figsize=(10,5))
sns.heatmap(product_segment_cross_tab,annot=True)
plt.show()

# cross tab
product_segment_cross_tab=pd.crosstab(df["Product"],df["Segment"])
# plot heat map
plt.figure(figsize=(10,8))
sns.heatmap(product_segment_cross_tab,annot=True,fmt="d",cmap="YlGnBu")
plt.show()

# calculate the avearage manufacturing price and sales for each product
average_price=df.groupby("Product").agg({"Manufacturing Price":"mean","Sale Price":"mean"})
# create the scatter plot
plt.figure(figsize=(12,9))
plt.title("Manufacturing Price vs sales ")
plt.xlabel("Manufacturing Price")
plt.ylabel("Sales")
for i,v in enumerate(average_price.index):
  plt.scatter(average_price["Manufacturing Price"][i],average_price["Sale Price"][i],label="Product")
  plt.legend()
  plt.grid()
plt.show()

# Calculate average 'Manufacturing Price' and 'Sale Price' for each product
average_prices = df.groupby('Product').agg({'Manufacturing Price': 'mean', 'Sale Price': 'mean'})

# Create a scatter plot of 'Manufacturing Price' vs 'Sale Price'
plt.figure(figsize=(10, 8))
for i, product in enumerate(average_prices.index):
    plt.scatter(average_prices['Manufacturing Price'][i], average_prices['Sale Price'][i], label=product)
plt.title('Manufacturing Price vs Sale Price')
plt.xlabel('Manufacturing Price')
plt.ylabel('Sale Price')
plt.legend()
plt.grid()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Calculate the average 'Manufacturing Price' and 'Sale Price' for each product
average_prices = df.groupby('Product').agg({'Manufacturing Price': 'mean', 'Sale Price': 'mean'})

# Create scatter plot
plt.figure(figsize=(12, 9))  # Slightly larger for clarity

for product in average_prices.index:
    plt.scatter(
        average_prices.loc[product, "Manufacturing Price"],
        average_prices.loc[product, "Sale Price"],
        label=product
    )

plt.title('Manufacturing Price vs Sale Price')
plt.xlabel('Manufacturing Price')
plt.ylabel('Sale Price')
plt.legend(title="Products", bbox_to_anchor=(1.05, 1), loc="upper left")  # Better legend placement
plt.grid()
plt.show()

# calcualte total unit of sold for each product
Product_units_sold= df.groupby("Product").agg({'Units Sold':sum})
product_unit_sold=Product_units_sold.sort_values(by="Units Sold",ascending=False)

Product_units_sold

# plot unit sold by product
plt.figure(figsize=(12,8))
plt.bar(product_unit_sold.index,product_unit_sold["Units Sold"],color="purple",alpha=0.7)
plt.title("Units Sold by Product")
plt.xlabel("Product")
plt.ylabel("Units Sold")
plt.grid()
plt.show()

# create  a cross tabulation of segment and country with sales as value
 segment_country_sales=df.pivot_table(values="Sales",index="Segment",columns="Country",aggfunc="sum")

segment_country_sales

# create a histogram for sales and profit
fig,ax=plt.subplots(2,1,figsize=(12,12))
ax[0].hist(df["Sales"],bins=20,color="blue",alpha=0.7)
ax[1].hist(df["Profit"] ,bins=20,color="green",alpha=0.7)
ax[0].set_title("Sales Histogram")
ax[0].set_xlabel("Sales")
ax[0].set_ylabel("Frequency")
ax[1].set_title("Profit Histogram")
ax[1].set_xlabel("Profit")
ax[0].grid()
ax[1].grid()
plt.tight_layout()
plt.show()

# calculate the average sales and profit for each Discount Band"
disount_band_average=df.groupby("Discount Band").agg({"Sales":"sum","Profit":"sum"})

# calculate the average sales and profit for each Discount Band"
disount_band_average
# plot the average sales and profit by discount
fig,ax=plt.subplots(2,1,figsize=(12,12))
ax[0].bar(disount_band_average.index,disount_band_average["Sales"],color="blue",alpha=0.7)
ax[0].set_title("Average Sales by Discount Band")
ax[0].set_xlabel("Discount Band")
ax[0].set_ylabel("Average Sales")
ax[0].grid()
ax[1].bar(disount_band_average.index,disount_band_average["Profit"],color="green",alpha=0.7)
ax[1].set_title('Average Profit by Discount Band')
ax[1].set_xlabel('Discount Band')
ax[1].set_ylabel('Average Profit')
ax[1].grid()

plt.tight_layout()
plt.show()

# calculate the Sales for each year
yearly_sales=df.groupby(df["Date"].dt.year).agg({"Sales":"sum"})

yearly_sales
# plot total sales by year
plt.figure(figsize=(12,8))
plt.plot(yearly_sales.index,yearly_sales["Sales"],marker="o",linestyle="--",color="skyblue")
plt.title('Total Sales by Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.grid()
plt.show()

#create a pivot table of units sold with product and segmetn as dimension
product_segment_units=df.pivot_table(values="Units Sold",index="Product",columns="Segment",aggfunc="sum")
# plot the heat map of the pivot table
plt.figure(figsize=(10,8))
sns.heatmap(product_segment_units,annot=True,fmt=".0f",cmap="viridis")
plt.title('Units Sold across Products and Market Segments')
plt.show()

# calculate the unit sold of each country
country_unit_sold=df.groupby("Country").agg({"Units Sold": "sum"})
# sort the data by unit sold
country_unit_sold=country_unit_sold.sort_values(by="Units Sold",ascending=False)
# plot the unit sold by country
plt.figure(figsize=(12,8))
plt.bar(country_unit_sold.index,country_unit_sold["Units Sold"],color="red",alpha=0.7)
plt.title("Units Sold by Country")
plt.xlabel("Country")
plt.ylabel("Units Sold")
plt.grid()
plt.show()

country_unit_sold

# create a new data frame with total monthly units sold for each product
monthly_product_units =df.groupby([df["Date"].dt.year,df["Date"].dt.month,"Product"]).agg({"Units Sold":"sum"})

monthly_product_units

# Create a new dataframe with total monthly units sold for each product
monthly_product_units = df.groupby([df['Date'].dt.year, df['Date'].dt.month, 'Product']).agg({'Units Sold': 'sum'})
monthly_product_units.index.names = ['Year', 'Month', 'Product']
monthly_product_units.reset_index(inplace=True)

# Create a 'Year-Month' column for easier plotting
monthly_product_units['Year-Month'] = pd.to_datetime(monthly_product_units[['Year', 'Month']].assign(day=1))
# plot monthly unit sold for each month
plt.figure(figsize=(14,7))
for product in monthly_product_units["Product"].unique():
  product_data=monthly_product_units[monthly_product_units["Product"]==product]
  plt.plot(product_data["Year-Month"],product_data["Units Sold"],label=product)
  plt.title('Monthly Units Sold by Product')
plt.xlabel('Date')
plt.ylabel('Units Sold')
plt.legend()
plt.grid()
plt.show()

# create a new data Frame with total monthly units sold for each segment
monthly_segment_units=df.groupby([df["Date"].dt.year,df["Date"].dt.month,"Segment"]).agg({"Units Sold":"sum"})
monthlysegm

monthly_segment_units

